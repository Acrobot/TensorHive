swagger: "2.0"

info:
  title: "{{title}} {{version}}"
  version: "{{version}}"

basePath: "/{{url_prefix}}"

paths:
  /users:
    get:
      tags: 
        - users
      summary: Get all users
      operationId: tensorhive.controllers.user.get_users_controller.all
      responses:
        200:
          description: {{RESPONSES['users']['get']['success']}}
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: {{RESPONSES['general']['unauthorized']}} or {{RESPONSES['token']['missing_auth_header']}} or {{RESPONSES['token']['expired']}}
        422:
          description: {{RESPONSES['token']['access']['required']}}
      security:
        - Bearer: []
  /user/create:
    post:
      tags: 
        - users
      summary: Create new user
      operationId: tensorhive.controllers.user.create_user_controller.create
      parameters:
        - description: User object
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/CreateUserController'
      responses:
        201:
          description: {{RESPONSES['user']['create']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}} or {{RESPONSES['token']['missing_auth_header']}} {{RESPONSES['token']['missing_auth_header']}} or {{RESPONSES['token']['expired']}} or {{RESPONSES['token']['revoked']}}
        403:
          description: {{RESPONSES['general']['unpriviliged']}}
        409:
          description: {{RESPONSES['user']['create']['failure']['duplicate']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/delete/{id}:
    delete:
      tags:
        - users
      summary: Delete user
      operationId: tensorhive.controllers.user.delete_user_controller.delete
      parameters:
        - description: Delete user by id
          in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: {{RESPONSES['user']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}} or {{RESPONSES['token']['missing_auth_header']}} {{RESPONSES['token']['missing_auth_header']}} or {{RESPONSES['token']['expired']}} or {{RESPONSES['token']['revoked']}}
        403:
          description: {{RESPONSES['general']['unpriviliged']}}
        404:
          description: {{RESPONSES['user']['not_found']}}
        422:
          description: {{RESPONSES['token']['access']['required']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/logout:
    delete:
      tags:
        - users
      summary: Logout user using access token
      operationId: tensorhive.controllers.user.logout_user_controller.logout_with_access_token
      responses:
        201:
          description: {{RESPONSES['user']['logout']['success']}}
        401:
          description: {{RESPONSES['token']['missing_auth_header']}} or {{RESPONSES['token']['expired']}} or {{RESPONSES['token']['revoked']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}      
      security:
        - Bearer: []
  /user/logout/refresh_token:
    delete:
      tags:
        - users
      summary: Logout user using refresh token
      operationId: tensorhive.controllers.user.logout_user_controller.logout_with_refresh_token
      responses:
        201:
          description: {{RESPONSES['user']['logout']['success']}}
        401:
          description: {{RESPONSES['token']['missing_auth_header']}}
        422:
          description: {{RESPONSES['token']['refresh']['required']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/refresh:
    get:
      tags:
        - users
      summary: Generate new access token using refresh token
      operationId: tensorhive.controllers.user.refresh_access_token_controller.generate
      responses:
        200:
          description: {{RESPONSES['token']['refresh']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}} or {{RESPONSES['token']['missing_auth_header']}}
        422:
          description: {{RESPONSES['token']['refresh']['required']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/login:
    post:
      tags:
        - users
      summary: Login user
      operationId: 'tensorhive.controllers.user.login_user_controller.login'
      parameters:
        - description: User object
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserLoginController'
      responses:
        200:
          description: {{RESPONSES['user']['login']['success']}}
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['user']['login']['failure']['credentials']}}
        404:
          description: {{RESPONSES['user']['not_found']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
  /reservations:
    get:
      tags: 
        - reservations
      summary: Get all reservation events
      operationId: tensorhive.controllers.reservation.get_reservation_controller.get
      parameters:
        - description: Array of uuids
          in: query
          name: resources_ids
          required: false
          type: array
          items: {
              type: string
            }
        - description: UTC ISO (e.g. 2019-10-22T19:23:45Z)
          in: query
          name: start
          required: false
          type: string
          format: date-time
        - description: UTC ISO
          in: query
          name: end
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: All fetched with success.
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationEvent'
        '400':
          description: Bad request. You have to specifiy either all parameters or none
      security:
        - Bearer: []
    post:
      tags: 
        - reservations
      summary: Create new reservation event
      operationId: tensorhive.controllers.reservation.create_reservation_controller.create
      parameters:
        - description: Reservation event object
          in: body
          name: reservation
          required: true
          schema:
            $ref: '#/definitions/CreateReservationEventController'
      responses:
        '201':
          description: Successfully created.
        '400':
          $ref: '#/responses/BadRequest'
        '500':
          $ref: '#/responses/InternalError'
      security:
        - Bearer: []
  /reservations/{id}:
    delete:
      tags: 
          - reservations
      summary: Delete reservation event by id
      operationId: tensorhive.controllers.reservation.delete_reservation_controller.delete
      parameters:
        - description: Id of reservation event
          in: path
          name: id
          required: true
          type: integer
      responses:
        '204':
          description: Successfully deleted.
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/InternalError'
      security:
        - Bearer: []
  # TODO Nodes: Add more specific schemas, response codes + descriptions
  /nodes/hostnames:
    get:
      tags: 
        - nodes
      summary: Get all hostnames
      operationId: tensorhive.controllers.nodes.infrastructure_controller.get_hostnames
      responses:
        '200':
          description: List of hostnames fetched with success
          schema:
            type: array
            items: 
              type: string
      security:
        - Bearer: []
  /nodes/metrics:
    get:
      tags: 
        - nodes
      summary: Get each node's all metric data
      operationId: tensorhive.controllers.nodes.infrastructure_controller.get_all_data
      responses:
        '200':
          description: 'Success'
          schema:
            type: object
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/info:
    get:
      tags: 
        - nodes
      summary: Get node's basic GPU information
      operationId: tensorhive.controllers.nodes.gpu_controller.get_info
      parameters:
        - $ref: '#/parameters/hostnameParam'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items: 
              type: object
        '404':
          $ref: '#/responses/NotFound'
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/metrics:
    get:
      tags: 
        - nodes
      summary: Get node's GPU metric data
      operationId: tensorhive.controllers.nodes.gpu_controller.get_metrics
      parameters:
        - $ref: '#/parameters/hostnameParam'
        - $ref: '#/parameters/gpuMetricTypeQuery'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items: 
              type: object
        '404':
          $ref: '#/responses/NotFound'
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/processes:
    get:
      tags: 
        - nodes
      summary: Get node's GPU processes data
      operationId: tensorhive.controllers.nodes.gpu_controller.get_processes
      parameters:
        - $ref: '#/parameters/hostnameParam'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items: 
              type: object
        '404':
          $ref: '#/responses/NotFound'
      security:
        - Bearer: []
definitions:
  CreateUserController:
    type: object
    properties:
      username: { type: string }
      password: { type: string }
  UserLoginController:
    type: object
    properties:
      username: { type: string }
      password: { type: string }
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: { type: string }
      createdAt:
        type: string
        format: date-time
  CreateReservationEventController:
    type: object
    properties:
      title: { type: string }
      description: { type: string }
      resourceId: { type: string }
      userId: { type: integer }
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
  ReservationEvent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title: { type: string }
      description: { type: string }
      resourceId: { type: string }
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time

responses:
  # Example responses
  # TODO Define more complex behaviour and use these reusable responses where possible (when API begins to stabilize)
  NotFound:
    description: Resource was not found
  Unauthorized:
    description: Unauthorized
  InternalError:
    description: Internal Server Error
  BadRequest:
    description: Bad Request
  NoPermission:
    description: User can not do that.
  Forbidden:
    description: Forbidden

parameters:
  hostnameParam:
    description: Node's hostname in the network
    in: path
    name: hostname
    required: true
    type: string
  gpuMetricTypeQuery:
    description: Metric type. If not present, queries for all metrics
    in: query
    name: metric_type
    required: false
    type: string
    enum:
      - fan_speed
      - mem_free
      - mem_used
      - mem_total
      - gpu_util
      - mem_util
      - temp
      - power

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
